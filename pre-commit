#!/usr/bin/env ruby
#
# A hook script to verify that only syntactically valid ruby code is commited.
# Called by git-commit with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# Put this code into a file called "pre-commit" inside your .git/hooks
# directory, and make sure it is executable ("chmod +x .git/hooks/pre-commit")

require 'open3'
include Open3

# Set this to true if you want warnings to stop your commit
stop_on_warnings = (`git config --bool hooks.stop-on-warnings` != "false\n")

def cmd_path(cmd)
  p = `which #{cmd}`.strip
  p if p.length > 0
end

def compiler_ruby
  @compiler_ruby ||= cmd_path('rbx') or cmd_path('ruby') or raise 'Ruby compiler not found!'
end

def check_rb_cmd(file)
  "#{compiler_ruby} -wc #{file}"
end

def check_erb_cmd(file)
  # Use erubis if it is available; so that .erb templates in Rails 3 projects will be
  # syntax-checked correctly. If using `bundle` we also need to test-run it first to
  # make sure that a Gemfile exists.
  @erb_cmd ||= if bundle_path = cmd_path('bundle') and `#{bundle_path}` and $? == 0
    "#{bundle_path} exec erubis -z %s"
  elsif erubis_path = cmd_path('erubis')
    "#{erubis_path} -z %s"
  elsif erb_path = cmd_path('erb')
    # Set trim mode to "-", just as Rails does
    "#{erb_path} -xT - %s | #{compiler_ruby} -wc"
  else
    raise "eRuby parser not found!"
  end
  @erb_cmd % file
end

changed_ruby_files = `git diff-index --name-only --cached HEAD`.split("\n").inject([]) do |files, line|
  files << line.chomp if line =~ /(.+\.(e?rb|task|rake|thor)|[Rr]akefile|[Tt]horfile)/
end

problematic_files = changed_ruby_files.inject([]) do |problematic_files, file|
  if File.readable? file
    cmd = if file =~ /\.erb\z/
      check_erb_cmd(file)
    else
      check_rb_cmd(file)
    end

    unless cmd.nil? then
      errors = nil
      popen3(cmd) do |stdin, stdout, stderr|
        errors = stdout.read.split("\n") + stderr.read.split("\n")
      end
      # erubis prints its warnings on stdout, so we need to scan everything.
      errors.reject!{ |line| line =~ /Syntax OK/ }
      errors.reject!{ |line| line =~ /[0-9]+:\s+warning:/ } unless stop_on_warnings
      unless errors.empty?
        errors.map!{ |line| line.sub(/#{file}:/, '') }
        problematic_files << "#{file}:\n#{errors.join("\n")}"
      end
    end
  end

  problematic_files
end

if problematic_files.size > 0
  $stderr.puts problematic_files.join("\n\n")
  exit 1
else
  # All is well
  exit 0
end
