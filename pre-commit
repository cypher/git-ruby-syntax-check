#!/usr/bin/env ruby
#
# A hook script to verify that only syntactically valid ruby code is commited.
# Called by git-commit with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# Put this code into a file called "pre-commit" inside your .git/hooks
# directory, and make sure it is executable ("chmod +x .git/hooks/pre-commit")

require 'open3'
include Open3

# Set this to true if you want warnings to stop your commit
stop_on_warnings = (`git config --bool hooks.stop-on-warnings` != "false\n")

# Set this to true if you 
skip_erb_files = (`git config --bool hooks.skip-erb-files` == "true\n")

compiler_ruby = `which rbx`.strip
compiler_ruby = `which ruby`.strip if compiler_ruby.length == 0

changed_ruby_files = `git diff-index --name-only --cached HEAD`.split("\n").inject([]) do |files, line|
  files << line.chomp if line =~ /(.+\.(e?rb|task|rake|thor)|[Rr]akefile|[Tt]horfile)/
  files
end

problematic_files = changed_ruby_files.inject([]) do |problematic_files, file|
  if File.readable? file
    cmd = if file =~ /\.erb\z/
      # Set trim mode to "-", just as Rails does
      "erb -xT - #{file} | #{compiler_ruby} -wc" unless skip_erb_files
    else
      "#{compiler_ruby} -wc #{file}"
    end

    unless cmd.nil? then
      errors = nil
      popen3(cmd) do |stdin, stdout, stderr|
        errors = stderr.read.split("\n")
      end
  
      errors.reject!{ |line| line =~ /[0-9]+:\s+warning:/ } unless stop_on_warnings
  
      unless errors.empty?
        errors.map!{ |line| line.sub(/#{file}:/, '') }
        problematic_files << "#{file}:\n#{errors.join("\n")}"
      end
    end
  end

  problematic_files
end

if problematic_files.size > 0
  $stderr.puts problematic_files.join("\n\n")
  exit 1
else
  # All is well
  exit 0
end
